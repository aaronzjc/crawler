// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	dto "github.com/aaronzjc/mu/internal/application/dto"
	mock "github.com/stretchr/testify/mock"

	oauth "github.com/aaronzjc/mu/pkg/oauth"
)

// OAuthService is an autogenerated mock type for the OAuthService type
type OAuthService struct {
	mock.Mock
}

type OAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *OAuthService) EXPECT() *OAuthService_Expecter {
	return &OAuthService_Expecter{mock: &_m.Mock}
}

// Auth provides a mock function with given fields: _a0, _a1
func (_m *OAuthService) Auth(_a0 string, _a1 string) (oauth.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 oauth.User
	if rf, ok := ret.Get(0).(func(string, string) oauth.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(oauth.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OAuthService_Auth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Auth'
type OAuthService_Auth_Call struct {
	*mock.Call
}

// Auth is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
func (_e *OAuthService_Expecter) Auth(_a0 interface{}, _a1 interface{}) *OAuthService_Auth_Call {
	return &OAuthService_Auth_Call{Call: _e.mock.On("Auth", _a0, _a1)}
}

func (_c *OAuthService_Auth_Call) Run(run func(_a0 string, _a1 string)) *OAuthService_Auth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *OAuthService_Auth_Call) Return(_a0 oauth.User, _a1 error) *OAuthService_Auth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetPlatform provides a mock function with given fields: _a0
func (_m *OAuthService) GetPlatform(_a0 string) oauth.OAuth {
	ret := _m.Called(_a0)

	var r0 oauth.OAuth
	if rf, ok := ret.Get(0).(func(string) oauth.OAuth); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(oauth.OAuth)
		}
	}

	return r0
}

// OAuthService_GetPlatform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlatform'
type OAuthService_GetPlatform_Call struct {
	*mock.Call
}

// GetPlatform is a helper method to define mock.On call
//   - _a0 string
func (_e *OAuthService_Expecter) GetPlatform(_a0 interface{}) *OAuthService_GetPlatform_Call {
	return &OAuthService_GetPlatform_Call{Call: _e.mock.On("GetPlatform", _a0)}
}

func (_c *OAuthService_GetPlatform_Call) Run(run func(_a0 string)) *OAuthService_GetPlatform_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *OAuthService_GetPlatform_Call) Return(_a0 oauth.OAuth) *OAuthService_GetPlatform_Call {
	_c.Call.Return(_a0)
	return _c
}

// Platforms provides a mock function with given fields: _a0
func (_m *OAuthService) Platforms(_a0 string) []dto.OAuthPlatform {
	ret := _m.Called(_a0)

	var r0 []dto.OAuthPlatform
	if rf, ok := ret.Get(0).(func(string) []dto.OAuthPlatform); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.OAuthPlatform)
		}
	}

	return r0
}

// OAuthService_Platforms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Platforms'
type OAuthService_Platforms_Call struct {
	*mock.Call
}

// Platforms is a helper method to define mock.On call
//   - _a0 string
func (_e *OAuthService_Expecter) Platforms(_a0 interface{}) *OAuthService_Platforms_Call {
	return &OAuthService_Platforms_Call{Call: _e.mock.On("Platforms", _a0)}
}

func (_c *OAuthService_Platforms_Call) Run(run func(_a0 string)) *OAuthService_Platforms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *OAuthService_Platforms_Call) Return(_a0 []dto.OAuthPlatform) *OAuthService_Platforms_Call {
	_c.Call.Return(_a0)
	return _c
}

// Redirect provides a mock function with given fields: _a0
func (_m *OAuthService) Redirect(_a0 string) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// OAuthService_Redirect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Redirect'
type OAuthService_Redirect_Call struct {
	*mock.Call
}

// Redirect is a helper method to define mock.On call
//   - _a0 string
func (_e *OAuthService_Expecter) Redirect(_a0 interface{}) *OAuthService_Redirect_Call {
	return &OAuthService_Redirect_Call{Call: _e.mock.On("Redirect", _a0)}
}

func (_c *OAuthService_Redirect_Call) Run(run func(_a0 string)) *OAuthService_Redirect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *OAuthService_Redirect_Call) Return(_a0 string) *OAuthService_Redirect_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewOAuthService interface {
	mock.TestingT
	Cleanup(func())
}

// NewOAuthService creates a new instance of OAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOAuthService(t mockConstructorTestingTNewOAuthService) *OAuthService {
	mock := &OAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
