// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/aaronzjc/mu/internal/application/dto"
	mock "github.com/stretchr/testify/mock"

	model "github.com/aaronzjc/mu/internal/domain/model"
)

// NodeRepo is an autogenerated mock type for the NodeRepo type
type NodeRepo struct {
	mock.Mock
}

type NodeRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *NodeRepo) EXPECT() *NodeRepo_Expecter {
	return &NodeRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *NodeRepo) Create(_a0 context.Context, _a1 model.Node) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Node) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NodeRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type NodeRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 model.Node
func (_e *NodeRepo_Expecter) Create(_a0 interface{}, _a1 interface{}) *NodeRepo_Create_Call {
	return &NodeRepo_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *NodeRepo_Create_Call) Run(run func(_a0 context.Context, _a1 model.Node)) *NodeRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Node))
	})
	return _c
}

func (_c *NodeRepo_Create_Call) Return(_a0 error) *NodeRepo_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *NodeRepo) Get(_a0 context.Context, _a1 *dto.Query) (model.Node, error) {
	ret := _m.Called(_a0, _a1)

	var r0 model.Node
	if rf, ok := ret.Get(0).(func(context.Context, *dto.Query) model.Node); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.Node)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.Query) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeRepo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type NodeRepo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dto.Query
func (_e *NodeRepo_Expecter) Get(_a0 interface{}, _a1 interface{}) *NodeRepo_Get_Call {
	return &NodeRepo_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *NodeRepo_Get_Call) Run(run func(_a0 context.Context, _a1 *dto.Query)) *NodeRepo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.Query))
	})
	return _c
}

func (_c *NodeRepo_Get_Call) Return(_a0 model.Node, _a1 error) *NodeRepo_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetList provides a mock function with given fields: _a0, _a1
func (_m *NodeRepo) GetList(_a0 context.Context, _a1 *dto.Query) ([]model.Node, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []model.Node
	if rf, ok := ret.Get(0).(func(context.Context, *dto.Query) []model.Node); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.Query) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeRepo_GetList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetList'
type NodeRepo_GetList_Call struct {
	*mock.Call
}

// GetList is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dto.Query
func (_e *NodeRepo_Expecter) GetList(_a0 interface{}, _a1 interface{}) *NodeRepo_GetList_Call {
	return &NodeRepo_GetList_Call{Call: _e.mock.On("GetList", _a0, _a1)}
}

func (_c *NodeRepo_GetList_Call) Run(run func(_a0 context.Context, _a1 *dto.Query)) *NodeRepo_GetList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.Query))
	})
	return _c
}

func (_c *NodeRepo_GetList_Call) Return(_a0 []model.Node, _a1 error) *NodeRepo_GetList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Update provides a mock function with given fields: _a0, _a1, _a2
func (_m *NodeRepo) Update(_a0 context.Context, _a1 model.Node, _a2 map[string]interface{}) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Node, map[string]interface{}) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NodeRepo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type NodeRepo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 model.Node
//   - _a2 map[string]interface{}
func (_e *NodeRepo_Expecter) Update(_a0 interface{}, _a1 interface{}, _a2 interface{}) *NodeRepo_Update_Call {
	return &NodeRepo_Update_Call{Call: _e.mock.On("Update", _a0, _a1, _a2)}
}

func (_c *NodeRepo_Update_Call) Run(run func(_a0 context.Context, _a1 model.Node, _a2 map[string]interface{})) *NodeRepo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Node), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *NodeRepo_Update_Call) Return(_a0 error) *NodeRepo_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewNodeRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewNodeRepo creates a new instance of NodeRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNodeRepo(t mockConstructorTestingTNewNodeRepo) *NodeRepo {
	mock := &NodeRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
