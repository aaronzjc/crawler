// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/aaronzjc/mu/internal/application/dto"
	mock "github.com/stretchr/testify/mock"

	model "github.com/aaronzjc/mu/internal/domain/model"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

type UserRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepo) EXPECT() *UserRepo_Expecter {
	return &UserRepo_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: _a0, _a1
func (_m *UserRepo) CreateUser(_a0 context.Context, _a1 model.User) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserRepo_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 model.User
func (_e *UserRepo_Expecter) CreateUser(_a0 interface{}, _a1 interface{}) *UserRepo_CreateUser_Call {
	return &UserRepo_CreateUser_Call{Call: _e.mock.On("CreateUser", _a0, _a1)}
}

func (_c *UserRepo_CreateUser_Call) Run(run func(_a0 context.Context, _a1 model.User)) *UserRepo_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.User))
	})
	return _c
}

func (_c *UserRepo_CreateUser_Call) Return(_a0 error) *UserRepo_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetUser provides a mock function with given fields: _a0, _a1
func (_m *UserRepo) GetUser(_a0 context.Context, _a1 *dto.Query) (model.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(context.Context, *dto.Query) model.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.Query) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type UserRepo_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dto.Query
func (_e *UserRepo_Expecter) GetUser(_a0 interface{}, _a1 interface{}) *UserRepo_GetUser_Call {
	return &UserRepo_GetUser_Call{Call: _e.mock.On("GetUser", _a0, _a1)}
}

func (_c *UserRepo_GetUser_Call) Run(run func(_a0 context.Context, _a1 *dto.Query)) *UserRepo_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.Query))
	})
	return _c
}

func (_c *UserRepo_GetUser_Call) Return(_a0 model.User, _a1 error) *UserRepo_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUsers provides a mock function with given fields: _a0, _a1
func (_m *UserRepo) GetUsers(_a0 context.Context, _a1 *dto.Query) ([]model.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []model.User
	if rf, ok := ret.Get(0).(func(context.Context, *dto.Query) []model.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.Query) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type UserRepo_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dto.Query
func (_e *UserRepo_Expecter) GetUsers(_a0 interface{}, _a1 interface{}) *UserRepo_GetUsers_Call {
	return &UserRepo_GetUsers_Call{Call: _e.mock.On("GetUsers", _a0, _a1)}
}

func (_c *UserRepo_GetUsers_Call) Run(run func(_a0 context.Context, _a1 *dto.Query)) *UserRepo_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.Query))
	})
	return _c
}

func (_c *UserRepo_GetUsers_Call) Return(_a0 []model.User, _a1 error) *UserRepo_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserRepo) UpdateUser(_a0 context.Context, _a1 model.User, _a2 map[string]interface{}) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User, map[string]interface{}) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UserRepo_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 model.User
//   - _a2 map[string]interface{}
func (_e *UserRepo_Expecter) UpdateUser(_a0 interface{}, _a1 interface{}, _a2 interface{}) *UserRepo_UpdateUser_Call {
	return &UserRepo_UpdateUser_Call{Call: _e.mock.On("UpdateUser", _a0, _a1, _a2)}
}

func (_c *UserRepo_UpdateUser_Call) Run(run func(_a0 context.Context, _a1 model.User, _a2 map[string]interface{})) *UserRepo_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.User), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *UserRepo_UpdateUser_Call) Return(_a0 error) *UserRepo_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewUserRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepo(t mockConstructorTestingTNewUserRepo) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
