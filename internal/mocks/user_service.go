// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/aaronzjc/mu/internal/application/dto"
	mock "github.com/stretchr/testify/mock"

	oauth "github.com/aaronzjc/mu/pkg/oauth"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// Auth provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserService) Auth(_a0 context.Context, _a1 string, _a2 oauth.User) (string, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, oauth.User) string); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, oauth.User) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_Auth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Auth'
type UserService_Auth_Call struct {
	*mock.Call
}

// Auth is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 oauth.User
func (_e *UserService_Expecter) Auth(_a0 interface{}, _a1 interface{}, _a2 interface{}) *UserService_Auth_Call {
	return &UserService_Auth_Call{Call: _e.mock.On("Auth", _a0, _a1, _a2)}
}

func (_c *UserService_Auth_Call) Run(run func(_a0 context.Context, _a1 string, _a2 oauth.User)) *UserService_Auth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(oauth.User))
	})
	return _c
}

func (_c *UserService_Auth_Call) Return(_a0 string, _a1 error) *UserService_Auth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUser provides a mock function with given fields: _a0, _a1
func (_m *UserService) GetUser(_a0 context.Context, _a1 *dto.Query) (*dto.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *dto.User
	if rf, ok := ret.Get(0).(func(context.Context, *dto.Query) *dto.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.Query) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type UserService_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dto.Query
func (_e *UserService_Expecter) GetUser(_a0 interface{}, _a1 interface{}) *UserService_GetUser_Call {
	return &UserService_GetUser_Call{Call: _e.mock.On("GetUser", _a0, _a1)}
}

func (_c *UserService_GetUser_Call) Run(run func(_a0 context.Context, _a1 *dto.Query)) *UserService_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.Query))
	})
	return _c
}

func (_c *UserService_GetUser_Call) Return(_a0 *dto.User, _a1 error) *UserService_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUserList provides a mock function with given fields: _a0
func (_m *UserService) GetUserList(_a0 context.Context) ([]*dto.User, error) {
	ret := _m.Called(_a0)

	var r0 []*dto.User
	if rf, ok := ret.Get(0).(func(context.Context) []*dto.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetUserList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserList'
type UserService_GetUserList_Call struct {
	*mock.Call
}

// GetUserList is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *UserService_Expecter) GetUserList(_a0 interface{}) *UserService_GetUserList_Call {
	return &UserService_GetUserList_Call{Call: _e.mock.On("GetUserList", _a0)}
}

func (_c *UserService_GetUserList_Call) Run(run func(_a0 context.Context)) *UserService_GetUserList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UserService_GetUserList_Call) Return(_a0 []*dto.User, _a1 error) *UserService_GetUserList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// VerifyToken provides a mock function with given fields: _a0, _a1, _a2
func (_m *UserService) VerifyToken(_a0 context.Context, _a1 string, _a2 string) bool {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UserService_VerifyToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyToken'
type UserService_VerifyToken_Call struct {
	*mock.Call
}

// VerifyToken is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 string
func (_e *UserService_Expecter) VerifyToken(_a0 interface{}, _a1 interface{}, _a2 interface{}) *UserService_VerifyToken_Call {
	return &UserService_VerifyToken_Call{Call: _e.mock.On("VerifyToken", _a0, _a1, _a2)}
}

func (_c *UserService_VerifyToken_Call) Run(run func(_a0 context.Context, _a1 string, _a2 string)) *UserService_VerifyToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserService_VerifyToken_Call) Return(_a0 bool) *UserService_VerifyToken_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
