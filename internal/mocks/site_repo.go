// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/aaronzjc/mu/internal/application/dto"
	mock "github.com/stretchr/testify/mock"

	model "github.com/aaronzjc/mu/internal/domain/model"
)

// SiteRepo is an autogenerated mock type for the SiteRepo type
type SiteRepo struct {
	mock.Mock
}

type SiteRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *SiteRepo) EXPECT() *SiteRepo_Expecter {
	return &SiteRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *SiteRepo) Create(_a0 context.Context, _a1 model.Site) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Site) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SiteRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type SiteRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 model.Site
func (_e *SiteRepo_Expecter) Create(_a0 interface{}, _a1 interface{}) *SiteRepo_Create_Call {
	return &SiteRepo_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *SiteRepo_Create_Call) Run(run func(_a0 context.Context, _a1 model.Site)) *SiteRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Site))
	})
	return _c
}

func (_c *SiteRepo_Create_Call) Return(_a0 error) *SiteRepo_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

// Del provides a mock function with given fields: _a0, _a1
func (_m *SiteRepo) Del(_a0 context.Context, _a1 model.Site) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Site) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SiteRepo_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type SiteRepo_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 model.Site
func (_e *SiteRepo_Expecter) Del(_a0 interface{}, _a1 interface{}) *SiteRepo_Del_Call {
	return &SiteRepo_Del_Call{Call: _e.mock.On("Del", _a0, _a1)}
}

func (_c *SiteRepo_Del_Call) Run(run func(_a0 context.Context, _a1 model.Site)) *SiteRepo_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Site))
	})
	return _c
}

func (_c *SiteRepo_Del_Call) Return(_a0 error) *SiteRepo_Del_Call {
	_c.Call.Return(_a0)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *SiteRepo) Get(_a0 context.Context, _a1 *dto.Query) ([]model.Site, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []model.Site
	if rf, ok := ret.Get(0).(func(context.Context, *dto.Query) []model.Site); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Site)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.Query) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SiteRepo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type SiteRepo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dto.Query
func (_e *SiteRepo_Expecter) Get(_a0 interface{}, _a1 interface{}) *SiteRepo_Get_Call {
	return &SiteRepo_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *SiteRepo_Get_Call) Run(run func(_a0 context.Context, _a1 *dto.Query)) *SiteRepo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.Query))
	})
	return _c
}

func (_c *SiteRepo_Get_Call) Return(_a0 []model.Site, _a1 error) *SiteRepo_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetNews provides a mock function with given fields: _a0, _a1, _a2
func (_m *SiteRepo) GetNews(_a0 context.Context, _a1 string, _a2 string) (model.News, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 model.News
	if rf, ok := ret.Get(0).(func(context.Context, string, string) model.News); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(model.News)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SiteRepo_GetNews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNews'
type SiteRepo_GetNews_Call struct {
	*mock.Call
}

// GetNews is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 string
func (_e *SiteRepo_Expecter) GetNews(_a0 interface{}, _a1 interface{}, _a2 interface{}) *SiteRepo_GetNews_Call {
	return &SiteRepo_GetNews_Call{Call: _e.mock.On("GetNews", _a0, _a1, _a2)}
}

func (_c *SiteRepo_GetNews_Call) Run(run func(_a0 context.Context, _a1 string, _a2 string)) *SiteRepo_GetNews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *SiteRepo_GetNews_Call) Return(_a0 model.News, _a1 error) *SiteRepo_GetNews_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SaveNews provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SiteRepo) SaveNews(_a0 context.Context, _a1 string, _a2 string, _a3 string) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SiteRepo_SaveNews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveNews'
type SiteRepo_SaveNews_Call struct {
	*mock.Call
}

// SaveNews is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 string
//   - _a3 string
func (_e *SiteRepo_Expecter) SaveNews(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *SiteRepo_SaveNews_Call {
	return &SiteRepo_SaveNews_Call{Call: _e.mock.On("SaveNews", _a0, _a1, _a2, _a3)}
}

func (_c *SiteRepo_SaveNews_Call) Run(run func(_a0 context.Context, _a1 string, _a2 string, _a3 string)) *SiteRepo_SaveNews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *SiteRepo_SaveNews_Call) Return(_a0 error) *SiteRepo_SaveNews_Call {
	_c.Call.Return(_a0)
	return _c
}

// Update provides a mock function with given fields: _a0, _a1, _a2
func (_m *SiteRepo) Update(_a0 context.Context, _a1 model.Site, _a2 map[string]interface{}) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Site, map[string]interface{}) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SiteRepo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type SiteRepo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 model.Site
//   - _a2 map[string]interface{}
func (_e *SiteRepo_Expecter) Update(_a0 interface{}, _a1 interface{}, _a2 interface{}) *SiteRepo_Update_Call {
	return &SiteRepo_Update_Call{Call: _e.mock.On("Update", _a0, _a1, _a2)}
}

func (_c *SiteRepo_Update_Call) Run(run func(_a0 context.Context, _a1 model.Site, _a2 map[string]interface{})) *SiteRepo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Site), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *SiteRepo_Update_Call) Return(_a0 error) *SiteRepo_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewSiteRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewSiteRepo creates a new instance of SiteRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSiteRepo(t mockConstructorTestingTNewSiteRepo) *SiteRepo {
	mock := &SiteRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
