// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/aaronzjc/mu/internal/application/dto"
	mock "github.com/stretchr/testify/mock"
)

// SiteService is an autogenerated mock type for the SiteService type
type SiteService struct {
	mock.Mock
}

type SiteService_Expecter struct {
	mock *mock.Mock
}

func (_m *SiteService) EXPECT() *SiteService_Expecter {
	return &SiteService_Expecter{mock: &_m.Mock}
}

// Del provides a mock function with given fields: _a0, _a1
func (_m *SiteService) Del(_a0 context.Context, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SiteService_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type SiteService_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int
func (_e *SiteService_Expecter) Del(_a0 interface{}, _a1 interface{}) *SiteService_Del_Call {
	return &SiteService_Del_Call{Call: _e.mock.On("Del", _a0, _a1)}
}

func (_c *SiteService_Del_Call) Run(run func(_a0 context.Context, _a1 int)) *SiteService_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *SiteService_Del_Call) Return(_a0 error) *SiteService_Del_Call {
	_c.Call.Return(_a0)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *SiteService) Get(_a0 context.Context, _a1 *dto.Query) ([]*dto.Site, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*dto.Site
	if rf, ok := ret.Get(0).(func(context.Context, *dto.Query) []*dto.Site); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.Site)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.Query) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SiteService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type SiteService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dto.Query
func (_e *SiteService_Expecter) Get(_a0 interface{}, _a1 interface{}) *SiteService_Get_Call {
	return &SiteService_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *SiteService_Get_Call) Run(run func(_a0 context.Context, _a1 *dto.Query)) *SiteService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.Query))
	})
	return _c
}

func (_c *SiteService_Get_Call) Return(_a0 []*dto.Site, _a1 error) *SiteService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Init provides a mock function with given fields: _a0
func (_m *SiteService) Init(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SiteService_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type SiteService_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *SiteService_Expecter) Init(_a0 interface{}) *SiteService_Init_Call {
	return &SiteService_Init_Call{Call: _e.mock.On("Init", _a0)}
}

func (_c *SiteService_Init_Call) Run(run func(_a0 context.Context)) *SiteService_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SiteService_Init_Call) Return(_a0 error) *SiteService_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

// ListOfIndex provides a mock function with given fields: _a0
func (_m *SiteService) ListOfIndex(_a0 context.Context) ([]*dto.IndexSite, error) {
	ret := _m.Called(_a0)

	var r0 []*dto.IndexSite
	if rf, ok := ret.Get(0).(func(context.Context) []*dto.IndexSite); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.IndexSite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SiteService_ListOfIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOfIndex'
type SiteService_ListOfIndex_Call struct {
	*mock.Call
}

// ListOfIndex is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *SiteService_Expecter) ListOfIndex(_a0 interface{}) *SiteService_ListOfIndex_Call {
	return &SiteService_ListOfIndex_Call{Call: _e.mock.On("ListOfIndex", _a0)}
}

func (_c *SiteService_ListOfIndex_Call) Run(run func(_a0 context.Context)) *SiteService_ListOfIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SiteService_ListOfIndex_Call) Return(_a0 []*dto.IndexSite, _a1 error) *SiteService_ListOfIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// News provides a mock function with given fields: _a0, _a1, _a2
func (_m *SiteService) News(_a0 context.Context, _a1 string, _a2 string) (*dto.News, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *dto.News
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *dto.News); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.News)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SiteService_News_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'News'
type SiteService_News_Call struct {
	*mock.Call
}

// News is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 string
func (_e *SiteService_Expecter) News(_a0 interface{}, _a1 interface{}, _a2 interface{}) *SiteService_News_Call {
	return &SiteService_News_Call{Call: _e.mock.On("News", _a0, _a1, _a2)}
}

func (_c *SiteService_News_Call) Run(run func(_a0 context.Context, _a1 string, _a2 string)) *SiteService_News_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *SiteService_News_Call) Return(_a0 *dto.News, _a1 error) *SiteService_News_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Upsert provides a mock function with given fields: _a0, _a1
func (_m *SiteService) Upsert(_a0 context.Context, _a1 *dto.Site) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.Site) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SiteService_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type SiteService_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dto.Site
func (_e *SiteService_Expecter) Upsert(_a0 interface{}, _a1 interface{}) *SiteService_Upsert_Call {
	return &SiteService_Upsert_Call{Call: _e.mock.On("Upsert", _a0, _a1)}
}

func (_c *SiteService_Upsert_Call) Run(run func(_a0 context.Context, _a1 *dto.Site)) *SiteService_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.Site))
	})
	return _c
}

func (_c *SiteService_Upsert_Call) Return(_a0 error) *SiteService_Upsert_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewSiteService interface {
	mock.TestingT
	Cleanup(func())
}

// NewSiteService creates a new instance of SiteService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSiteService(t mockConstructorTestingTNewSiteService) *SiteService {
	mock := &SiteService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
