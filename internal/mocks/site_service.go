// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/aaronzjc/mu/internal/application/dto"
	mock "github.com/stretchr/testify/mock"
)

// SiteService is an autogenerated mock type for the SiteService type
type SiteService struct {
	mock.Mock
}

type SiteService_Expecter struct {
	mock *mock.Mock
}

func (_m *SiteService) EXPECT() *SiteService_Expecter {
	return &SiteService_Expecter{mock: &_m.Mock}
}

// SiteNews provides a mock function with given fields: _a0, _a1, _a2
func (_m *SiteService) SiteNews(_a0 context.Context, _a1 string, _a2 string) (*dto.News, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *dto.News
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *dto.News); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.News)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SiteService_SiteNews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SiteNews'
type SiteService_SiteNews_Call struct {
	*mock.Call
}

// SiteNews is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 string
func (_e *SiteService_Expecter) SiteNews(_a0 interface{}, _a1 interface{}, _a2 interface{}) *SiteService_SiteNews_Call {
	return &SiteService_SiteNews_Call{Call: _e.mock.On("SiteNews", _a0, _a1, _a2)}
}

func (_c *SiteService_SiteNews_Call) Run(run func(_a0 context.Context, _a1 string, _a2 string)) *SiteService_SiteNews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *SiteService_SiteNews_Call) Return(_a0 *dto.News, _a1 error) *SiteService_SiteNews_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SitesOfAdmin provides a mock function with given fields: _a0
func (_m *SiteService) SitesOfAdmin(_a0 context.Context) ([]*dto.Site, error) {
	ret := _m.Called(_a0)

	var r0 []*dto.Site
	if rf, ok := ret.Get(0).(func(context.Context) []*dto.Site); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.Site)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SiteService_SitesOfAdmin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SitesOfAdmin'
type SiteService_SitesOfAdmin_Call struct {
	*mock.Call
}

// SitesOfAdmin is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *SiteService_Expecter) SitesOfAdmin(_a0 interface{}) *SiteService_SitesOfAdmin_Call {
	return &SiteService_SitesOfAdmin_Call{Call: _e.mock.On("SitesOfAdmin", _a0)}
}

func (_c *SiteService_SitesOfAdmin_Call) Run(run func(_a0 context.Context)) *SiteService_SitesOfAdmin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SiteService_SitesOfAdmin_Call) Return(_a0 []*dto.Site, _a1 error) *SiteService_SitesOfAdmin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SitesOfIndex provides a mock function with given fields: _a0
func (_m *SiteService) SitesOfIndex(_a0 context.Context) ([]*dto.IndexSite, error) {
	ret := _m.Called(_a0)

	var r0 []*dto.IndexSite
	if rf, ok := ret.Get(0).(func(context.Context) []*dto.IndexSite); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.IndexSite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SiteService_SitesOfIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SitesOfIndex'
type SiteService_SitesOfIndex_Call struct {
	*mock.Call
}

// SitesOfIndex is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *SiteService_Expecter) SitesOfIndex(_a0 interface{}) *SiteService_SitesOfIndex_Call {
	return &SiteService_SitesOfIndex_Call{Call: _e.mock.On("SitesOfIndex", _a0)}
}

func (_c *SiteService_SitesOfIndex_Call) Run(run func(_a0 context.Context)) *SiteService_SitesOfIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SiteService_SitesOfIndex_Call) Return(_a0 []*dto.IndexSite, _a1 error) *SiteService_SitesOfIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewSiteService interface {
	mock.TestingT
	Cleanup(func())
}

// NewSiteService creates a new instance of SiteService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSiteService(t mockConstructorTestingTNewSiteService) *SiteService {
	mock := &SiteService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
