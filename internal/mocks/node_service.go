// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/aaronzjc/mu/internal/application/dto"
	mock "github.com/stretchr/testify/mock"

	rpc "github.com/aaronzjc/mu/internal/core/rpc"
)

// NodeService is an autogenerated mock type for the NodeService type
type NodeService struct {
	mock.Mock
}

type NodeService_Expecter struct {
	mock *mock.Mock
}

func (_m *NodeService) EXPECT() *NodeService_Expecter {
	return &NodeService_Expecter{mock: &_m.Mock}
}

// CheckNodes provides a mock function with given fields: _a0, _a1
func (_m *NodeService) CheckNodes(_a0 context.Context, _a1 *rpc.RpcPool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpc.RpcPool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NodeService_CheckNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckNodes'
type NodeService_CheckNodes_Call struct {
	*mock.Call
}

// CheckNodes is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *rpc.RpcPool
func (_e *NodeService_Expecter) CheckNodes(_a0 interface{}, _a1 interface{}) *NodeService_CheckNodes_Call {
	return &NodeService_CheckNodes_Call{Call: _e.mock.On("CheckNodes", _a0, _a1)}
}

func (_c *NodeService_CheckNodes_Call) Run(run func(_a0 context.Context, _a1 *rpc.RpcPool)) *NodeService_CheckNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*rpc.RpcPool))
	})
	return _c
}

func (_c *NodeService_CheckNodes_Call) Return(_a0 error) *NodeService_CheckNodes_Call {
	_c.Call.Return(_a0)
	return _c
}

// Del provides a mock function with given fields: _a0, _a1
func (_m *NodeService) Del(_a0 context.Context, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NodeService_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type NodeService_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int
func (_e *NodeService_Expecter) Del(_a0 interface{}, _a1 interface{}) *NodeService_Del_Call {
	return &NodeService_Del_Call{Call: _e.mock.On("Del", _a0, _a1)}
}

func (_c *NodeService_Del_Call) Run(run func(_a0 context.Context, _a1 int)) *NodeService_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *NodeService_Del_Call) Return(_a0 error) *NodeService_Del_Call {
	_c.Call.Return(_a0)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *NodeService) Get(_a0 context.Context, _a1 *dto.Query) ([]*dto.Node, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*dto.Node
	if rf, ok := ret.Get(0).(func(context.Context, *dto.Query) []*dto.Node); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.Query) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type NodeService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dto.Query
func (_e *NodeService_Expecter) Get(_a0 interface{}, _a1 interface{}) *NodeService_Get_Call {
	return &NodeService_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *NodeService_Get_Call) Run(run func(_a0 context.Context, _a1 *dto.Query)) *NodeService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.Query))
	})
	return _c
}

func (_c *NodeService_Get_Call) Return(_a0 []*dto.Node, _a1 error) *NodeService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Upsert provides a mock function with given fields: _a0, _a1
func (_m *NodeService) Upsert(_a0 context.Context, _a1 *dto.Node) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.Node) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NodeService_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type NodeService_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dto.Node
func (_e *NodeService_Expecter) Upsert(_a0 interface{}, _a1 interface{}) *NodeService_Upsert_Call {
	return &NodeService_Upsert_Call{Call: _e.mock.On("Upsert", _a0, _a1)}
}

func (_c *NodeService_Upsert_Call) Run(run func(_a0 context.Context, _a1 *dto.Node)) *NodeService_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.Node))
	})
	return _c
}

func (_c *NodeService_Upsert_Call) Return(_a0 error) *NodeService_Upsert_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewNodeService interface {
	mock.TestingT
	Cleanup(func())
}

// NewNodeService creates a new instance of NodeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNodeService(t mockConstructorTestingTNewNodeService) *NodeService {
	mock := &NodeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
