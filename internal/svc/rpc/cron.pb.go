// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cron.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Cron struct {
	Site                 string   `protobuf:"bytes,1,opt,name=site,proto3" json:"site,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cron) Reset()         { *m = Cron{} }
func (m *Cron) String() string { return proto.CompactTextString(m) }
func (*Cron) ProtoMessage()    {}
func (*Cron) Descriptor() ([]byte, []int) {
	return fileDescriptor_21379dc2cd81a5b8, []int{0}
}

func (m *Cron) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cron.Unmarshal(m, b)
}
func (m *Cron) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cron.Marshal(b, m, deterministic)
}
func (m *Cron) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cron.Merge(m, src)
}
func (m *Cron) XXX_Size() int {
	return xxx_messageInfo_Cron.Size(m)
}
func (m *Cron) XXX_DiscardUnknown() {
	xxx_messageInfo_Cron.DiscardUnknown(m)
}

var xxx_messageInfo_Cron proto.InternalMessageInfo

func (m *Cron) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

type CronRes struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CronRes) Reset()         { *m = CronRes{} }
func (m *CronRes) String() string { return proto.CompactTextString(m) }
func (*CronRes) ProtoMessage()    {}
func (*CronRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_21379dc2cd81a5b8, []int{1}
}

func (m *CronRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CronRes.Unmarshal(m, b)
}
func (m *CronRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CronRes.Marshal(b, m, deterministic)
}
func (m *CronRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CronRes.Merge(m, src)
}
func (m *CronRes) XXX_Size() int {
	return xxx_messageInfo_CronRes.Size(m)
}
func (m *CronRes) XXX_DiscardUnknown() {
	xxx_messageInfo_CronRes.DiscardUnknown(m)
}

var xxx_messageInfo_CronRes proto.InternalMessageInfo

func (m *CronRes) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*Cron)(nil), "rpc.cron")
	proto.RegisterType((*CronRes)(nil), "rpc.cronRes")
}

func init() {
	proto.RegisterFile("cron.proto", fileDescriptor_21379dc2cd81a5b8)
}

var fileDescriptor_21379dc2cd81a5b8 = []byte{
	// 138 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x2e, 0xca, 0xcf,
	0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a, 0x48, 0x56, 0x92, 0xe2, 0x62, 0x01,
	0x09, 0x09, 0x09, 0x71, 0xb1, 0x14, 0x67, 0x96, 0xa4, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06,
	0x81, 0xd9, 0x4a, 0xca, 0x5c, 0xec, 0x20, 0xb9, 0xa0, 0xd4, 0x62, 0x21, 0x09, 0x2e, 0xf6, 0xe2,
	0xd2, 0xe4, 0xe4, 0xd4, 0xe2, 0x62, 0xb0, 0x0a, 0x8e, 0x20, 0x18, 0xd7, 0xc8, 0x84, 0x8b, 0xd3,
	0x39, 0x3f, 0x37, 0x37, 0x31, 0x2f, 0x25, 0xb5, 0x48, 0x48, 0x9d, 0x8b, 0x2b, 0xb4, 0x20, 0x25,
	0xb1, 0x24, 0xd5, 0x19, 0x64, 0x26, 0xa7, 0x5e, 0x51, 0x41, 0xb2, 0x1e, 0xc8, 0x08, 0x29, 0x1e,
	0x38, 0x33, 0x28, 0xb5, 0x58, 0x89, 0x21, 0x89, 0x0d, 0xec, 0x04, 0x63, 0x40, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x31, 0xb6, 0x5e, 0x51, 0x90, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CommanderClient is the client API for Commander service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommanderClient interface {
	UpdateCron(ctx context.Context, in *Cron, opts ...grpc.CallOption) (*CronRes, error)
}

type commanderClient struct {
	cc grpc.ClientConnInterface
}

func NewCommanderClient(cc grpc.ClientConnInterface) CommanderClient {
	return &commanderClient{cc}
}

func (c *commanderClient) UpdateCron(ctx context.Context, in *Cron, opts ...grpc.CallOption) (*CronRes, error) {
	out := new(CronRes)
	err := c.cc.Invoke(ctx, "/rpc.Commander/UpdateCron", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommanderServer is the server API for Commander service.
type CommanderServer interface {
	UpdateCron(context.Context, *Cron) (*CronRes, error)
}

// UnimplementedCommanderServer can be embedded to have forward compatible implementations.
type UnimplementedCommanderServer struct {
}

func (*UnimplementedCommanderServer) UpdateCron(ctx context.Context, req *Cron) (*CronRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCron not implemented")
}

func RegisterCommanderServer(s *grpc.Server, srv CommanderServer) {
	s.RegisterService(&_Commander_serviceDesc, srv)
}

func _Commander_UpdateCron_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cron)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommanderServer).UpdateCron(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Commander/UpdateCron",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommanderServer).UpdateCron(ctx, req.(*Cron))
	}
	return interceptor(ctx, in, info, handler)
}

var _Commander_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Commander",
	HandlerType: (*CommanderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateCron",
			Handler:    _Commander_UpdateCron_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cron.proto",
}
